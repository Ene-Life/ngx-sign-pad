{"version":3,"sources":["ng://ngx-sign-pad/lib/models/image-type.enum.ts","ng://ngx-sign-pad/lib/sign-pad.component.ts","ng://ngx-sign-pad/lib/canvas-resize.directive.ts","ng://ngx-sign-pad/lib/sign-pad.module.ts"],"names":["PNG","SVG","JPEG","SignPadComponent","this","signatureChange","EventEmitter","_options","dotSize","minWidth","maxWidth","penColor","debounceTime","Object","defineProperty","prototype","value","assign","ngAfterContentInit","_this","signaturePad","SignaturePad","canvasElementRef","nativeElement","options","onEnd","emit","toDataURL","type","clear","Component","args","selector","template","Input","Output","ViewChild","CanvasResizeDirective","renderer","ngAfterViewInit","listen","window","currentSignature","EImageType","setTimeout","resizeCanvas","canvas","fromDataURL","ratio","Math","max","devicePixelRatio","height","parseFloat","getAttribute","width","error","initial","container","parentNode","offsetHeight","offsetWidth","setAttribute","toString","getContext","scale","Directive","ElementRef","Renderer2","SignPadModule","NgModule","declarations","imports","exports"],"mappings":"uXACIA,IAAM,YACNC,IAAM,gBACNC,KAAO,cCHXC,EAAA,WAwCE,SAAAA,IAhBUC,KAAAC,gBAAkB,IAAIC,EAAAA,aAiB9BF,KAAKG,SAAW,CACdC,QAAS,EACTC,SAAU,EACVC,SAAU,EACVC,SAAU,eACVC,aAAc,IAgBpB,OAnCEC,OAAAC,eAAaX,EAAAY,UAAA,UAAO,KAIpB,WACE,OAAOX,KAAKG,cALd,SAAqBS,GACnBH,OAAOI,OAAOb,KAAKG,SAAUS,oCAsB/Bb,EAAAY,UAAAG,mBAAA,WAAA,IAAAC,EAAAf,KACEA,KAAKgB,aAAe,IAAIC,EAAajB,KAAKkB,iBAAiBC,cAAenB,KAAKoB,SAC/EpB,KAAKgB,aAAaK,MAAK,WACrBN,EAAKd,gBAAgBqB,KAAKP,EAAKC,aAAaO,UAAUR,EAAKS,SAI/DzB,EAAAY,UAAAc,MAAA,WACEzB,KAAKgB,aAAaS,QAClBzB,KAAKC,gBAAgBqB,KAAKtB,KAAKgB,aAAaO,UAAUvB,KAAKwB,4BAtD9DE,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,eACVC,SAAU,gIACD,4QAeRC,EAAAA,+BACAC,EAAAA,qBAEAD,EAAAA,uBACAA,EAAAA,gCAQAE,EAAAA,UAASL,KAAA,CAAC,oBA2Bb5B,EA9DA,GCAAkC,EAAA,WAkBE,SAAAA,EAAoBf,EAAyDgB,GAAzDlC,KAAAkB,iBAAAA,EAAyDlB,KAAAkC,SAAAA,EAwC/E,OArCED,EAAAtB,UAAAwB,gBAAA,WAAA,IAAApB,EAAAf,KACEA,KAAKkC,SAASE,OAAOC,OAAQ,SAAQ,eAC7BC,EAAmBvB,EAAKC,aAAaO,UAAUgB,EAAW3C,KAChE4C,WAAU,WACRzB,EAAK0B,eACL1B,EAAKC,aAAaS,YACZiB,EAAS3B,EAAKG,iBAAiBC,cACrCJ,EAAKC,aAAa2B,YAAYL,EAC5B,CACEM,MAAOC,KAAKC,IAAIT,OAAOU,kBAAoB,EAAG,GAC9CC,OAAQC,WAAWP,EAAOQ,aAAa,WACvCC,MAAOF,WAAWP,EAAOQ,aAAa,WACvC,SACAE,GACKA,GACFrC,EAAKC,aAAaS,WAGH,IAApBV,EAAKP,gBAEVR,KAAKyC,gBAGCR,EAAAtB,UAAA8B,aAAR,SAAqBY,GAArB,IAAAtC,EAAAf,UAAqB,IAAAqD,IAAAA,GAAA,OACbX,EAAS1C,KAAKkB,iBAAiBC,cAC/BmC,EAAYtD,KAAKkC,SAASqB,WAAWb,GACrCE,EAAQC,KAAKC,IAAIT,OAAOU,kBAAoB,EAAG,GAEjDO,EAAUE,cAAgBF,EAAUG,aACtCzD,KAAKkC,SAASwB,aAAahB,EAAQ,SAAUY,EAAUG,YAAcb,GAAOe,YAC5E3D,KAAKkC,SAASwB,aAAahB,EAAQ,UAAWY,EAAUE,aAAeZ,GAAOe,YAC9EjB,EAAOkB,WAAW,MAAMC,MAAMjB,EAAOA,IAC5BS,GACTb,WAAU,WAASzB,EAAK0B,cAAa,IAA6B,IAApBzC,KAAKQ,mCA5CxDsD,EAAAA,UAASnC,KAAA,CAAC,CACTC,SAAU,iEAPVmC,EAAAA,kBADAC,EAAAA,mDAYClC,EAAAA,4BACAA,EAAAA,SA0CHG,EA1DA,GCAAgC,EAAA,WAIA,SAAAA,KAM6B,2BAN5BC,EAAAA,SAAQvC,KAAA,CAAC,CACRwC,aAAc,CAACpE,EAAkBkC,GACjCmC,QAAS,GAETC,QAAS,CAACtE,OAEiBkE,EAV7B","sourcesContent":["export enum EImageType {\r\n    PNG = 'image/png',\r\n    SVG = 'image/svg+xml',\r\n    JPEG = 'image/jpeg'\r\n  }","import { Component, ViewChild, ElementRef, AfterContentInit, EventEmitter, Output, Input, OnChanges } from '@angular/core';\r\nimport SignaturePad from 'signature_pad';\r\nimport { EImageType } from './models/image-type.enum';\r\nimport { SignaturePadOptions } from './models/signaturePadOptions';\r\n\r\n@Component({\r\n  selector: 'ngx-sign-pad',\r\n  template: `<canvas #canvasElement libCanvasResize [debounceTime]=\"options?.debounceTime\" [signaturePad]=\"signaturePad\"></canvas>`,\r\n  styles: [`\r\n  :host {\r\n    position: relative;\r\n    display: inline-block;\r\n    box-sizing: border-box;\r\n  }\r\n  :host canvas {\r\n    position: relative;\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n  `]\r\n})\r\nexport class SignPadComponent implements AfterContentInit {\r\n\r\n  @Input() signature: string;\r\n  @Output() signatureChange = new EventEmitter<string>();\r\n\r\n  @Input() type: EImageType | string;\r\n  @Input() set options(value: SignaturePadOptions) {\r\n    Object.assign(this._options, value);\r\n  };\r\n\r\n  get options() : SignaturePadOptions {\r\n    return this._options;\r\n  }\r\n\r\n  @ViewChild('canvasElement') canvasElementRef: ElementRef<HTMLCanvasElement>;\r\n\r\n  public signaturePad: SignaturePad;\r\n  private _options: SignaturePadOptions;\r\n\r\n  constructor() {\r\n    this._options = {\r\n      dotSize: 1,\r\n      minWidth: 1,\r\n      maxWidth: 2,\r\n      penColor: 'rgb(0, 0, 0)',\r\n      debounceTime: 10\r\n    };\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this.signaturePad = new SignaturePad(this.canvasElementRef.nativeElement, this.options);\r\n    this.signaturePad.onEnd = () => {\r\n      this.signatureChange.emit(this.signaturePad.toDataURL(this.type));\r\n    };\r\n  }\r\n\r\n  clear(){\r\n    this.signaturePad.clear();\r\n    this.signatureChange.emit(this.signaturePad.toDataURL(this.type));\r\n  }\r\n\r\n}\r\n","import {\r\n  Directive,\r\n  AfterViewInit,\r\n  Renderer2,\r\n  ElementRef,\r\n  Input\r\n} from '@angular/core';\r\nimport SignaturePad from 'signature_pad';\r\nimport { EImageType } from './models/image-type.enum';\r\n\r\n@Directive({\r\n  selector: '[libCanvasResize]'\r\n})\r\nexport class CanvasResizeDirective implements AfterViewInit {\r\n\r\n  @Input() private signaturePad: SignaturePad;\r\n  @Input() private debounceTime?: number;\r\n\r\n  constructor(private canvasElementRef: ElementRef<HTMLCanvasElement>, private renderer: Renderer2) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.renderer.listen(window, 'resize', () => {\r\n      const currentSignature = this.signaturePad.toDataURL(EImageType.PNG);\r\n      setTimeout(() => {\r\n        this.resizeCanvas();\r\n        this.signaturePad.clear();\r\n        const canvas = this.canvasElementRef.nativeElement;\r\n        this.signaturePad.fromDataURL(currentSignature,\r\n          {\r\n            ratio: Math.max(window.devicePixelRatio || 1, 1),\r\n            height: parseFloat(canvas.getAttribute('height')),\r\n            width: parseFloat(canvas.getAttribute('width'))\r\n          },\r\n          (error) => {\r\n            if (error) {\r\n              this.signaturePad.clear();\r\n            }\r\n          });\r\n      }, this.debounceTime | 100);\r\n    });\r\n    this.resizeCanvas();\r\n  }\r\n\r\n  private resizeCanvas(initial: boolean = false) {\r\n    const canvas = this.canvasElementRef.nativeElement;\r\n    const container = this.renderer.parentNode(canvas);\r\n    const ratio = Math.max(window.devicePixelRatio || 1, 1);\r\n\r\n    if (container.offsetHeight && container.offsetWidth) {\r\n      this.renderer.setAttribute(canvas, 'width', (container.offsetWidth * ratio).toString());\r\n      this.renderer.setAttribute(canvas, 'height', (container.offsetHeight * ratio).toString());\r\n      canvas.getContext('2d').scale(ratio, ratio);\r\n    } else if (initial) {\r\n      setTimeout(() => { this.resizeCanvas(true) }, this.debounceTime | 100);\r\n    }\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { SignPadComponent } from './sign-pad.component';\r\nimport { CanvasResizeDirective } from './canvas-resize.directive';\r\n\r\n@NgModule({\r\n  declarations: [SignPadComponent, CanvasResizeDirective],\r\n  imports: [\r\n  ],\r\n  exports: [SignPadComponent]\r\n})\r\nexport class SignPadModule { }\r\n"]}